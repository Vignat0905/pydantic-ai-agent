i have this files
main.py 
from fastapi import FastAPI
from pydantic import BaseModel
from agent import ask_agent

app = FastAPI()

class UserPrompt(BaseModel):
    query: str

@app.post("/chat")
def chat(prompt: UserPrompt):
    response = ask_agent(prompt.query)
    return {"response": response}

agent.py

import google.generativeai as genai
import mysql.connector
from dotenv import load_dotenv
import os
import json

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Connect to MySQL and run query
def run_sql_query(query: str) -> str:
    try:
        conn = mysql.connector.connect(
            host=os.getenv("MYSQL_HOST"),
            port=os.getenv("MYSQL_PORT"),
            user=os.getenv("MYSQL_USER"),
            password=os.getenv("MYSQL_PASSWORD"),
            database=os.getenv("MYSQL_DATABASE")
        )
        cursor = conn.cursor(dictionary=True)
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return json.dumps(result, indent=2)
    except Exception as e:
        return f"Error running query: {str(e)}"

# Gemini function tool schema
function_declarations = [
    {
        "name": "run_sql_query",
        "description": "Executes an SQL query on the employee database and returns the result.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "A valid SQL query to run on the employee table."
                }
            },
            "required": ["query"]
        }
    }
]

model = genai.GenerativeModel(
    model_name="models/gemini-1.5-flash",
    tools=[{"function_declarations": function_declarations}]
)

def ask_agent(prompt: str) -> str:
    try:
        # Initial LLM response
        response = model.generate_content(prompt)
        parts = response.candidates[0].content.parts

        if parts and hasattr(parts[0], 'function_call'):
            function_call = parts[0].function_call
            if function_call.name == "run_sql_query":
                query = function_call.args["query"]
                result = run_sql_query(query)

                # Return combined response
                followup = model.generate_content(
                    [
                        {"role": "user", "parts": [prompt]},
                        {"role": "function", "name": "run_sql_query", "parts": [result]}
                    ]
                )
                return followup.text.strip()

        return response.text.strip()
    except Exception as e:
        return f"Error during Gemini chat completion: {str(e)}"

db.py 
import mysql.connector
import os
from dotenv import load_dotenv

load_dotenv()

def get_connection():
    return mysql.connector.connect(
        host=os.getenv("MYSQL_HOST"),
        user=os.getenv("MYSQL_USER"),
        password=os.getenv("MYSQL_PASSWORD"),
        database=os.getenv("MYSQL_DATABASE"),
        port=int(os.getenv("MYSQL_PORT", 3306))
    )

modeld.py
from pydantic_ai import Tool
from tools import GetSchemaDetailsInput, RunSQLQueryInput, get_schema_details, run_sql_query

tools = [
    Tool.from_function(
        name="get_schema_details",
        description="User provides table schema (name and columns)",
        func=get_schema_details,
        input_model=GetSchemaDetailsInput
    ),
    Tool.from_function(
        name="run_sql_query",
        description="Executes a SQL query provided by the user",
        func=run_sql_query,
        input_model=RunSQLQueryInput
    )
]

req.txt
openai
fastapi
uvicorn
python-dotenv
mysql-connector-python


and tools.py
def get_schema_details(table_description: str) -> str:
    # Store or print schema - simulate a memory step
    return f"Schema stored: {table_description}"


def run_sql_query(query: str) -> str:
    from db import get_connection
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query)
        results = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]
        cursor.close()
        conn.close()

        rows = [dict(zip(columns, row)) for row in results]
        return f"Query result:\n{rows}"
    except Exception as e:
        return f"Error: {str(e)}"


now tell me what changes i have to do for 

 for this Provide Pydantic AI code for an agent that has 2 tools 
1. get schema details- which will ask the user to enter the table structure, and the user will enter the table structure, like columns or attributes, in the prompt 
2. Run SQL query- which will run a query asked by the user, like if the user asks that give me the names of employees whose salary is more than 30,000 and then the tool will run a MySQL query and return the answer

also, I have a table in a MySQL database, so connect it with the MySQL database Provide complete code for that, and how to run that, and how to connect to the database, and make it more feature-rich and use-case based, like it can solve a user's problem, and use the openai api key(that I have generated) and the corresponding model

in mysql, my_database i have employees table which looks like this 
mysql> select * from employees;
+-------------+------------+------------+----------+--------------+------------+--------------------+----------+----------------+------------+---------------+
| employee_id | first_name | last_name  | email    | phone_number | hire_date  | job_id             | salary   | commission_pct | manager_id | department_id |
+-------------+------------+------------+----------+--------------+------------+--------------------+----------+----------------+------------+---------------+
|         103 | Alexander  | Hunold     | AHUNOLD  | 590.423.4567 | 2016-05-20 | IT PROG            |  9000.00 |           NULL |        102 |            60 |
|         104 | Bruce      | Ernst      | BERNST   | 590.423.4568 | 2014-05-20 | FINANCIAL MANAGER  |  6000.00 |           0.00 |        103 |            60 |
|         105 | David      | Austin     | DAUSTIN  | 590.423.4569 | 2001-09-17 | IT PROG            |  4800.00 |           0.00 |        103 |            60 |
|         114 | Den        | Raphaely   | DRAPHEAL | 515.127.4561 | 1990-09-01 | SALES CLERK        | 11000.00 |           0.00 |        100 |            30 |
|         119 | Karen      | Colmenares | KCOLMENA | 515.127.4566 | 1987-07-06 | CLERK              |  2500.00 |           NULL |        114 |            30 |
|         102 | Lex        | De Haan    | LDEHAAN  | 123.515.4569 | 2017-06-19 | VICE PRESIDENT     | 17000.00 |           NULL |        100 |            90 |
|         101 | Neena      | Kochhar    | NKOCHHAR | 515.123.4568 | 2012-06-18 | VICE PRESIDENT     | 17000.00 |           0.00 |        100 |            90 |
|         100 | Steven     | King       | SKING    | 515.123.4567 | 2000-06-17 | PRESIDENT          | 24000.00 |           NULL |        103 |            90 |
|         106 | Valli      | Pataballa  | VPATABAL | 590.423.4560 | 2001-09-20 | FINANCE ACCOUNTANT |  4800.00 |           0.00 |        103 |            60 |
|         206 | William    | Gietz      | WGIETZ   | 515.123.8181 | 2005-07-06 | ACCOUNTANT         |  8300.00 |           NULL |        205 |           110 |
+-------------+------------+------------+----------+--------------+------------+--------------------+----------+----------------+------------+---------------+
10 rows in set (0.00 sec)
